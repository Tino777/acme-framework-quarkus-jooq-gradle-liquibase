/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.testshop.tables.dtos;


import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import org.acme.generated.AbstractDTO;
import org.acme.generated.testshop.tables.interfaces.IDatabasechangeloglock;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Valid
public class Databasechangeloglock extends AbstractDTO implements IDatabasechangeloglock {

    private static final long serialVersionUID = 1L;

    private Integer       ID;
    private Boolean       LOCKED;
    private LocalDateTime LOCKGRANTED;
    private String        LOCKEDBY;

    public Databasechangeloglock() {}

    public Databasechangeloglock(IDatabasechangeloglock value) {
        this.ID = value.getID();
        this.LOCKED = value.getLOCKED();
        this.LOCKGRANTED = value.getLOCKGRANTED();
        this.LOCKEDBY = value.getLOCKEDBY();
    }

    public Databasechangeloglock(
        Integer       ID,
        Boolean       LOCKED,
        LocalDateTime LOCKGRANTED,
        String        LOCKEDBY
    ) {
        this.ID = ID;
        this.LOCKED = LOCKED;
        this.LOCKGRANTED = LOCKGRANTED;
        this.LOCKEDBY = LOCKEDBY;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOGLOCK.ID</code>.
     */
    @NotNull
    @Override
    public Integer getID() {
        return this.ID;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOGLOCK.ID</code>.
     */
    @Override
    public void setID(Integer ID) {
        this.ID = ID;
        this.setAt("ID", ID);
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOGLOCK.LOCKED</code>.
     */
    @NotNull
    @Override
    public Boolean getLOCKED() {
        return this.LOCKED;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOGLOCK.LOCKED</code>.
     */
    @Override
    public void setLOCKED(Boolean LOCKED) {
        this.LOCKED = LOCKED;
        this.setAt("LOCKED", LOCKED);
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOGLOCK.LOCKGRANTED</code>.
     */
    @Override
    public LocalDateTime getLOCKGRANTED() {
        return this.LOCKGRANTED;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOGLOCK.LOCKGRANTED</code>.
     */
    @Override
    public void setLOCKGRANTED(LocalDateTime LOCKGRANTED) {
        this.LOCKGRANTED = LOCKGRANTED;
        this.setAt("LOCKGRANTED", LOCKGRANTED);
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOGLOCK.LOCKEDBY</code>.
     */
    @Size(max = 255)
    @Override
    public String getLOCKEDBY() {
        return this.LOCKEDBY;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOGLOCK.LOCKEDBY</code>.
     */
    @Override
    public void setLOCKEDBY(String LOCKEDBY) {
        this.LOCKEDBY = LOCKEDBY;
        this.setAt("LOCKEDBY", LOCKEDBY);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Databasechangeloglock (");

        sb.append(ID);
        sb.append(", ").append(LOCKED);
        sb.append(", ").append(LOCKGRANTED);
        sb.append(", ").append(LOCKEDBY);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDatabasechangeloglock from) {
        setID(from.getID());
        setLOCKED(from.getLOCKED());
        setLOCKGRANTED(from.getLOCKGRANTED());
        setLOCKEDBY(from.getLOCKEDBY());
    }

    @Override
    public <E extends IDatabasechangeloglock> E into(E into) {
        into.from(this);
        return into;
    }
}
